#!/usr/bin/env sage

from collections import deque
from Crypto.Util.number import long_to_bytes
from tqdm import tqdm


n = 8098851734937207931222242323719278262039311278408396153102939840336549151541408692581651429325092535316359074019383926520363453725271849258924996783681725111665666420297112252565291898169877088446887149672943461236879128453847442584868198963005276340812322871768679441501282681171263391133217373094824601748838255306528243603493400515452224778867670063040337191204276832576625227337670689681430055765023322478267339944312535862682499007423158988134472889946113994555274385595499503495488202251032898470224056637967019786473820952632846823442509236976892995505554046850101313269847925347047514591030406052185186963433
c = 7109666883988892105091816608945789114105575520302872143453259352879355990908149124303310269223886289484842913063773914475282456079383409262649058768777227206800315566373109284537693635270488429501591721126853086090237488579840160957328710017268493911400151764046320861154478494943928510792105098343926542515526432005970840321142196894715037239909959538873866099850417570975505565638622448664580282210383639403173773002795595142150433695880167315674091756597784809792396452578104130341085213443116999368555639128246707794076354522200892568943534878523445909591352323861659891882091917178199085781803940677425823784662

e_ = 0x10001


def e_digits():
    a = e
    a *= 10 ^ (floor(log(a, 10)) + 1)
    n = 10000
    while True:
        a *= 10 ^ n
        b = floor(a)
        a -= b
        l = b.digits()
        yield from [0] * (n - len(l))
        yield from reversed(l)


prime_num = 4
nbits = 512
min_ndigits = floor(log(2 ^ (nbits - 1), 10)) + 1
max_ndigits = floor(log(2 ^ nbits - 1, 10)) + 1
prime_list = []
digit_list = deque(maxlen=int(max_ndigits))
for d in tqdm(e_digits()):
    digit_list.appendleft(d)
    for ndigits in range(min_ndigits, max_ndigits + 1):
        if len(digit_list) < ndigits:
            continue
        p = sum(digit_list[i] * 10 ^ i for i in range(ndigits))
        if p.nbits() == nbits and n % p == 0 and p.is_prime():
            print('\n', p)
            prime_list.append(p)
    if len(prime_list) >= prime_num:
        break

assert prod(prime_list) == n
phi = prod(p - 1 for p in prime_list)
d = inverse_mod(e_, phi)
m = pow(c, d, n)

print(long_to_bytes(int(m)))
